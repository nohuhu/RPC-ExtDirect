=pod

=head1 NAME

RPC::ExtDirect::Intro - A gentle introduction to RPC::ExtDirect

=head1 DESCRIPTION

=head2 What is Ext.Direct?

Ext.Direct is a high level RPC-over-HTTP protocol provided out of the box
with L<Ext JS|http://www.sencha.com/products/extjs/> JavaScript framework.
It is server agnostic, provided that the server side stack is conformant
to L<Ext.Direct specification|http://www.sencha.com/products/extjs/extdirect/>.

L<RPC::ExtDirect> is a fully featured implementation of Ext.Direct protocol
in Perl, compatible with Ext JS 4.x and 5.x.

=head2 What Ext.Direct is for?

The primary goal for Ext.Direct is easy and fast integration of server components
with JavaScript interface. Client side stack is built in Ext JS core and is used
by many components like data Stores, Forms, Grids, Charts, etc. Ext.Direct supports
request batching, file uploads, event polling and many other features.

Besides simplicity and ease of use, Ext.Direct allows to achieve very clean
code and issue separation both on server and client sides, which in turn
results in simplified code, greater overall software quality and shorter
development times.

From Perl module developer perspective, Ext.Direct is just a transport;
it doesn't matter if a method is called from Perl code or through
Ext.Direct. This approach, in particular, allows for multi-tiered testing:

=over 4 

=item *

Server side methods can be tested without setting up HTTP environment
with the usual tools like L<Test::More>

=item *

Server side classes can be tested as a whole via Ext.Direct calls
using L<Perl client|RPC::ExtDirect::Client>

=item *

Major application components are tested with browser automation tools
like Selenium.

=back

=head2 Terminology

Ext.Direct uses the following terms, followed by their descriptions:

=over 4

=item API

Description of server side calls exposed to client side. Includes
information on L</Action> and L</Method> names, as well as argument
number and/or names, and other parameters.

=item API declaration

JavaScript chunk that encodes L</API>. Usually generated
by application server and retrieved by client once upon startup.
Another option is to embed API declaration in client side application
code.

API declaration is generated by L<RPC::ExtDirect::API> module.

=item Router

Server side component that receives remoting calls, dispatches requests,
collects and returns call L<Results|/Result> or L<Exceptions|/Exception>.

=item Action

Namespace unit; collection of L<Methods|/Method>. The nearest Perl analog
is a package, other languages may call it a Class.

Since Ext.Direct originated in JavaScript, '::' will be replaced with dots
for all Actions in the L</"API declaration">, and should be called as
C<Action.Method()> instead of Perl style C<Action::Method>.

=item Method

Subroutine exposed through Ext.Direct API to be called by client side.
Method is fully qualified by L</Action> and Method names using a dot as
the delimiter: C<Action.Method>.

=item Result

Any data returned by a L</Method> upon successful or unsuccessful call
completion. This includes application logic errors. 'Not authenticated'
and alike events should be returned as Results, not L<Exceptions|/Exception>.

=item Exception

Fatal error, or any other unrecoverable event in application code. Calls
that produce Exception instead of L</Result> are considered unsuccessful;
Ext.Direct provides built in mechanism for managing Exceptions.

Exceptions are not used to indicate errors in application logic flow,
only for catastrophic conditions. Nearest analog is status code 500
for HTTP responses.

Examples of Exceptions are: request JSON is broken and can't be decoded;
called Method dies because of internall error; Result cannot be encoded
in JSON, etc.

=item Event

An asynchronous notification that can be generated by server side and
passed to client side, resulting in some reaction. Events are useful
for status updates, progress indicators and other predictably occuring
conditions and events.

=item Event Provider

Server side script that gets polled by client side every N seconds;
default N is 3 but it can be changed in client side configuration.

=back

=cut
