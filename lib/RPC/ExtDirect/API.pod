=pod

=head1 NAME

RPC::ExtDirect::API - Ext.Direct service discovery handler

=head1 SYNOPSIS

    use RPC::ExtDirect::Config;
    use RPC::ExtDirect::API;
    
    my $config = RPC::ExtDirect::Config->new(
        namespace    => 'MyApp',
        router_path  => '/router',
        poll_path    => '/events',
        remoting_var => 'MyApp.REMOTING_API',
        polling_var  => 'MyApp.POLLING_API',
    );
    
    my $api = RPC::ExtDirect::API->new_from_hashref(
        config   => $config,
        api_href => {
            before => 'MyApp::Util::global_before_hook',
            after  => 'MyApp::Util::global_after_hook',
            
            action => 'MyApp.Server.Foo', # JavaScript style with dots
            
            'MyApp::Server::Foo' => {
                before  => 'MyApp::Server::Foo::package_before_hook',
                
                methods => {
                    foo => {
                        len => 1,
                    },
                    bar => {
                        params => [qw/ foo bar /],
                    },
                }
            }
        }
    );

=head1 DESCRIPTION

With Ext.Direct, the L<API|RPC::ExtDirect::Intro/API> exposed by the
server side is published to the clients via fixed URI, a GET request
to which produces a response with a piece of JavaScript code containing
the API declaration. This module handles the API service discovery requests.

The actual Ext.Direct L<API declaration|RPC::ExtDirect::Intro/"API declaration">
is in fact a tree-like data structure (an Object in JavaScript parlance)
containing description of L<Actions|RPC::ExtDirect::Intro/Action> and
L<Methods|RPC::ExtDirect::Intro/Method> available to the client. This
data structure is encoded in JavaScript code statement.

=head1 COMPILE VS RUN TIME DEFINITION

There are two ways to define Ext.Direct L<API|RPC::ExtDirect::Intro/API>
with RPC::ExtDirect: statically by using C<ExtDirect> subroutine attribute,
or dynamically by including Actions and Methods in a hashref that is used to
configure an API object.

Both of these ways have their advantages and disadvantages. Using the
C<ExtDirect> attribute, it's easier to keep definitions closer to the
actual code so that when the code changes, its definition can be
remembered to be changed as well. Also this approach is very easy to use
and start with; just add the attribute to your code, and you're good to
go. Also, the attribute syntax is expressive enough to be self-documenting,
so often no other API documentation is needed.

On the other hand, for larger and more centralized projects it may be easier
to keep all API definitions in one place rather than spread over dozens of
packages. Besides easier maintenance, using dynamic approach allows having
more than one active API object at a given time, possibly implementing
different APIs tailored for usage patterns of a particular application.

Under the hood, static API definition operates on a global instance of
C<RPC::ExtDirect::API>, created at compile time and populated by
C<ExtDirect> attribute handler called on the methods that have this
attribute defined. Because attribute parsing happens at package compilation
time, it is hard to predict the order in which the methods will be
processed. To provide some help with debugging, RPC::ExtDirect will throw
an error if you are trying to redefine a Method; usually that means a
mistake has been made somewhere.

=head1 GLOBAL API TREE INSTANCE

With the static API definition approach, the actual API structure gets
populated with Actions and Methods at the package compilation time, and
should be available globally thoughout the application. Versions 1.x and
2.x of RPC::ExtDirect used package global variables to hold this
information; version 3.0 is using a global L<RPC::ExtDirect::API> object
instead. This object is held in a private variable and can be retrieved by
L<get_api|RPC::ExtDirect/get_api> method:

    my $global_api = RPC::ExtDirect->get_api;

This API object holds an instance of L<RPC::ExtDirect::Config> with a set
of options used to configure the API object behavior. This Config instance
can be retrieved to set options directly:

    my $cfg = RPC::ExtDirect->get_api->config;
    $cfg->option1('foo');
    $cfg->option2('bar');

Since the API object is a normal object, and the L<config|/config> is a
normal accessor, it is possible to replace that Config instance with
a new one. However this may result in a loss of statically defined Config
options, and is not recommended. Instead, use
L<import package sub|/CONFIGURATION> to configure the global API when
using static API definitions.

The global API instance is used by default to generate the
L<API declaration|RPC::ExtDirect::Intro/"API declaration"> requested by
the client side, and for dispatching remoting calls from the client side.
If you prefer more control over the API tree, create the API object
explicitly as shown in the L<SYNOPSIS/SYNOPSIS>, and pass it to the
gateway object. Refer to the actual L<gateway|RPC::ExtDirect::Intro/GATEWAYS>
documentation for details.

=head1 ACTIONS AND METHODS

An L<Action|RPC::ExtDirect::Intro/Action> in Ext.Direct parlance is a collection
of L<Method|RPC::ExtDirect::Intro/Method> definitions. The nearest similar Perl
thing is a package, other languages may call it a Class. In L<RPC::ExtDirect>,
an Action needs a unique name that can be nested; Methods should have unique names
within their Actions.

=head2 Action names

If the Action name is not specified explicitly, it will be deduced from the package
name. If L<api_full_action_names|RPC::ExtDirect::Config/api_full_action_names> Config
option is truthy, Action name will be similar to the package name with the same
level of nesting, having C<'::'> replaced with dots: C<'Foo::Bar::Baz' -> 'Foo.Bar.Baz'>.
Starting with Ext JS version 4.2.1, this allows having nested API objects on the
client side as well, so you can call the server side methods like normal JavaScript
methods:

    Foo.Bar.Baz.do_foo(...);

However nested API objects are not supported in Ext JS below 4.2.1 as well as in
Sencha Touch 2.x, so the default behavior is to use only the last chunk of the
package name: C<'Foo::Bar::Baz' -> 'Baz'>.

=head2 Method calling conventions

L<Ext.Direct specification|www.sencha.com/products/extjs/extdirect/> defines two
calling convention for methods: with parameters passed by position (ordered),
or with parameters passed by name (named). When an Ext.Direct remoting method is
called on the client side, the transport layer will perform a check on the actual
arguments passed to the L<method stub|RPC::ExtDirect::Intro/"Method stub">, and
throw an exception if arguments do not conform to the
L<API declaration|RPC::ExtDirect::Intro/"API declaration">.

To declare an ordered method, define the L</len> option with the number of
parameters accepted; this number may be 0 for methods that do not accept any
parameters at all.

To declare a named method, define the L</params> option with the names of
mandatory parameters. It is worth noting that only I<existence> of parameters
is mandatory; their values may as well be undefined. If not all arguments
exist, an exception will be thrown. If there are any extra arguments not declared
for this method, an exception will be thrown as well, unless strict argument
checking is turned off (L<see below|/"Lazy parameter checking">).

=head2 Lazy parameter checking

Starting with Ext JS 4.2.2 and RPC::ExtDirect 3.0+, it is possible to perform
less strict parameter checking on by-name methods. All parameters explicitly
declared for a method will still be treated as mandatory, but no exception
will be thrown if undeclared arguments are passed into the
L<method stub|RPC::ExtDirect::Intro/"Method stub">; these "extra" arguments
will be transmitted to the server side and passed into the actual
L<Method|RPC::ExtDirect::Intro/Method>. It is also possible to completely
bypass the argument checking by not declaring any mandatory methods for
a Method.

As mentioned above, the strict checking is enabled by default; to disable it,
set the L</strict> option to falsy value for any given method.

Lazy parameter checking is not supported in Ext JS below 4.2.2, and in
Sencha Touch 2.x.

=head1 OPTIONS

The following  are supported for Methods:

=over 4

=item 

=head1 CONFIGURATION

RPC::ExtDirect::API provides two ways to configure Ext.Direct API declaration
variables to accommodate specific application needs: dynamic via an
L<RPC::ExtDirect::Config> instance, and static via C<import> package
subroutine.

An example of the new dynamic configuration is available in the L</SYNOPSIS>
above. This is the preferred way of configuring the API in large complex
applications; it allows keeping the whole API definition in one place
instead of distributed among the packages. It is also possible to define
more than one API this way, for publishing to different clients.

The static configuration was available since version 1.0 and will be
supported going forward. This way it is possible to configure the API
variables at compile time:

 use RPC::ExtDirect::API         namespace    => 'myApp',
                                 router_path  => '/router',
                                 poll_path    => '/events',
                                 remoting_var => 'Ext.app.REMOTING_API',
                                 polling_var  => 'Ext.app.POLLING_API',
                                 auto_connect => 0,
                                 no_polling   => 0,
                                 before       => \&global_before_hook,
                                 after        => \&global_after_hook,
                                 ;

=head1 API CONFIGURATION OPTIONS

The following configuration options are supported by RPC::ExtDirect::API:

=over 4

=item namespace

Declares the namespace your L<Actions|RPC::ExtDirect::Intro/Action> will
reside in. To call the L<Methods|RPC::ExtDirect::Intro/Method> on client side,
you will have to qualify them with namespace: C<namespace.Action.Method>,
e.g.: C<myApp.Foo.Bar>

=item router_path

URI for Ext.Direct L<Router|RPC::ExtDirect::Intro/Router> calls. For the
L<CGI environment|CGI::ExtDirect>, this should be the name of the CGI script
that provides the API declaration; for more sophisticated environments it is
an anchor for specified PATH_INFO.

=item poll_path

URI for Ext.Direct L<Event Provider|RPC::ExtDirect::Intro/"Event Provider">
calls. Client side will poll this URI periodically, hence the name.

=item remoting_var

By default, Ext.Direct L<API declaration|RPC::ExtDirect::Intro/"API declaration">
for remoting (forward) L<Methods|RPC::ExtDirect::Intro/Method> is stored in
Ext.app.REMOTING_API variable. If for any reason you would like to change that,
do this by setting remoting_var.

Note that in production environment you would probably want to use a compiled
version of the JavaScript application that consist of one big JavaScript file.
In this case, it is recommended to include API declaration as the first script
in your index.html and change the remoting API variable name to something like
C<EXT_DIRECT_API>. Default variable name depends on Ext.app namespace being
available by the time Ext.Direct
L<API declaration|RPC::ExtDirect::Intro/"API declaration"> is downloaded, which is
often not the case.

=item polling_var

Ext.Direct does not provide a standard namespace for
L<Event Providers|RPC::ExtDirect::Intro/"Event Provider"> to be published in.
For similarity with L</remoting_var>, C<Ext.app.POLLING_API> name is used to
declare an L<Event Provider|RPC::ExtDirect::Intro/"Event Provider"> so that
it could be used on the client side without having to hardcode any URIs
explicitly.

C<Ext.app.POLLING_API> configuration will only be published to the client side
if there is at least one L<pollHandler|RPC::ExtDirect::Config/pollHandler>
L<Method|RPC::ExtDirect::Intro/Method> defined in the Ext.Direct
L<API|RPC::ExtDirect::Intro/API>.

Note that the same variable naming caveat applies here as with L</remoting_var>.

=item no_polling

Explicitly prohibit the L<API declaration|RPC::ExtDirect::Intro/"API declaration">
from containing a L</polling_var> definition. This will suppress publishing
L<Event Providers|RPC::ExtDirect::Intro/"Event Provider"> even if there are any
L<pollHandler|RPC::ExtDirect::Config/pollHandler> methods in the actual
L<API|RPC::ExtDirect::Intro/API>.

This option can be useful for testing.

=item auto_connect

This option is deprecated and should not be used anymore.

=item before

Global C<before> hook. See L<RPC::ExtDirect/HOOKS>.

=item instead

Global C<instead> hook. See L<RPC::ExtDirect/HOOKS>.

=item after

Global C<after> hook. See L<RPC::ExtDirect/HOOKS>.

=back

=head1 SEE ALSO

More information on the configuration options can be found in
L<RPC::ExtDirect::Config> documentation.

=cut
