RPC::ExtDirect
==============

DESCRIPTION

    RPC::ExtDirect suite of modules provides an easy, simple and robust way
    to write Perl server side code that could be used with HTML5 Rich
    Internet Applications based on JavaScript frameworks Ext JS and Sencha
    Touch.

    The suite consists of the core RPC::ExtDirect module that implements
    Ext.Direct protocol and transport layer, several server
    environment-specific peripheral gateways, a standalone pure Perl server,
    two Perl clients, and even its own specialized testing scaffold! We've
    got it covered front to back. :)

WHEN TO USE IT, AND WHY

    Ext.Direct is a Remote Procedure Call (RPC) protocol provided out of the
    box with JavaScript frameworks by Sencha. It is deeply integrated in the
    data services, and is supported by a slew of components. Besides that,
    Ext.Direct also has several major advantages over similar protocols like
    XML-RPC and JSON-RPC:

    *   Built in service discovery mechanism: server side API is published
        to the client via GET requests to a preconfigured URI

    *   Dead simple client side invocation via functional stubs created from
        the API declaration

    *   Support for request batching with configurable timeout

    *   Easy file uploads via form submits, with all the complexity handled
        behind the curtains by the framework and the server side stack

    *   Asynchronous push notifications via event polling

    All this makes Ext.Direct a no-brainer when developing Web apps with Ext
    JS or Sencha Touch. And with RPC::ExtDirect, choosing Perl to write
    server side code for Web apps comes naturally, too. :)

INSTALLATION

    To install this module type the following:

        perl Makefile.PL
        make
        make test
        make install

DEPENDENCIES

    RPC::ExtDirect is dependent on the following modules:
    Attribute::Handlers, JSON.

LICENSE AND COPYRIGHT

    Copyright (c) 2011-2014 by Alex Tokarev.

    This module is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself. See "perlartistic".

